#git repository directory address
1.git@github.com:Username/Projectname.git  (ssh protocol)
2.https://github.com/Username/Projectname.git  (https protocol)


#creat and initialize a local repository
1. make directory to creat a repository
2. "git init"

#add files into Git repository
1. "git add <file>"
2. "git commit -m <message>"

#display the status of working dir
1. "git status"
2. if file has been modified, use "git diff" check contents

#change-over version of modified file
1. HEAD pointer points to current version, changing version equal to change HEAD pointer
2. "git reset --hard commit_id"
   "git reset --hard HEAD^"  previous version
   "git reset --hard HEAD^^" ..
   "git reset --hard HEAD~100"
3. "git log" check commit history
4. "git reflog" check history commands

#Working Directory and Repository
1. working dir: file folder
2. Repository:	".git" directory
	workdir:	"git add->"		Stage(index) provisional district   @discard changes in working dir@ "git checkout --<file>"
	stage:		"git commit->"		Master and HEAD 		    @unstage@ "git reset HEAD <file>"

#remove file
1. "git rm"

#remote repository
1. creat github account
2. generate SSH Key: ssh-keygen -t rsa -C "youremail@example.com"
3. add SSH Key: login GitHub->account setting->add SSH key


#add remote repository
1. creat repository in GitHub
2. associate a remote repository: "git remote add origin git@github.com:Username/Projectname.git"  --run command in shell
3. push all contents: git push -u origin master
4. update repository later: git push origin master

#clone from remote repository
1. remote repository
2. "git clone git@github.com:Username/Projectname.git"

#creat and merge branch
1. check branch:	git branch
2. creat branch:	git branch <name>
3. switch branch:	git checkout <name> 
4. creat and switch:	git checkout -b <name>
5. merge a branch to current branch:	git merge <name>
6. delete branch:	git branch -d <name>

#fix conflict
1. fix conflict manually
2. git add
3. git commit
/* "git log --graph --pretty=oneline --abbrev-commit"  check branch with graph model*/

#branch strategy.
1. git merge --no-ff -m "***" <name>
there is a commit history in log, --no-ff option.

#Bug branch
when you debug, we always creat a temporary branch to debug then merge to master final delete temp branch.
but when you are doing other job, and have not finished yet. you can: save the scene, then do debug next recover the scene final continue to do
1. save the scene
   git stash
2. check stash
   git list stash
3. recover the scene
   a. git stash apply	## stash contents don't delete and use  "git stash drop" to delete
   b. git stash pop     ## stash contents delete

# multiple stash have been used
1. "git stash list" to check   
2. "git stash apply stash@{0}" to recover stash specified

# develop a new featurr, best to creat a branch ******
# use "git branch -D <name>" force delete a branch that has never been merged
